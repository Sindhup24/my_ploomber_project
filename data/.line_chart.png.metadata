{"timestamp": 1722521428.261104, "stored_source_code": "# add default values for parameters here\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\ndef run(upstream, product):\n    df = pd.read_csv(upstream['filter_data']['data'])\n    id = df['Id'].iloc[0]  # Example: using the first ID\n\n    # Ensure date is in datetime format\n    df['date'] = pd.to_datetime(df['date'])\n\n    fig, ax1 = plt.subplots(figsize=(12, 8))\n    ax2 = ax1.twinx()  # Instantiate a second y-axis that shares the same x-axis\n\n    # Plot 51 lines for each ens_mem value with shortened legend labels\n    for ens_mem in range(51):\n        ens_mem_data = df[df['ens_mem'] == ens_mem]\n        ax1.plot(ens_mem_data['date'], ens_mem_data['value'], linestyle='-', alpha=0.5, label=f'em {ens_mem}')\n\n    ax1.set_xlabel('Date', fontweight='bold')\n    ax1.set_ylabel('Value', fontweight='bold')\n    ax1.set_title(f'Value over Time for ID {id}', fontweight='bold')\n    ax1.grid(True)\n\n    # Set major locator and formatter for x-axis\n    ax1.xaxis.set_major_locator(mdates.AutoDateLocator())\n    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n    plt.setp(ax1.get_xticklabels(), rotation=45, ha='right')\n\n    plt.subplots_adjust(right=0.7, top=0.95, bottom=0.35)  # Adjust the top, right, and bottom of the graph\n\n    # Add horizontal lines for ActiveThemeWarningLevelValues with different line styles and colors on secondary y-axis\n    warning_levels = {\n        'ActiveThemeWarningLevelValues_Normal Flow': ('-', 'green', 'ATWLV_Normal'),\n        'ActiveThemeWarningLevelValues_2 years Return Period Flow': ('--', 'red', 'ATWLV_2 years'),\n        'ActiveThemeWarningLevelValues_5 years Return Period Flow': ('-.', 'yellow', 'ATWLV_5 years'),\n        'ActiveThemeWarningLevelValues_10 years Return Period Flow': (':', 'purple', 'ATWLV_10 years'),\n        'ActiveThemeWarningLevelValues_15 years Return Period Flow': ((0, (3, 1, 1, 1)), 'orange', 'ATWLV_15 years'),\n        'ActiveThemeWarningLevelValues_20 years Return Period Flow': ((0, (5, 1)), 'cyan', 'ATWLV_20 years')\n    }\n\n    for level, (linestyle, color, short_name) in warning_levels.items():\n        if level in df.columns:\n            value = df[level].unique()[0]\n            ax2.axhline(y=value, color=color, linestyle=linestyle, label=short_name)\n\n    # Adjust legend positioning to be horizontal at the bottom\n    handles1, labels1 = ax1.get_legend_handles_labels()\n    handles2, labels2 = ax2.get_legend_handles_labels()\n    combined_handles = handles1 + handles2\n    combined_labels = labels1 + labels2\n\n    # Ensure only unique labels are displayed\n    unique_labels = {}\n    for handle, label in zip(combined_handles, combined_labels):\n        if label not in unique_labels:\n            unique_labels[label] = handle\n\n    fig.legend(unique_labels.values(), unique_labels.keys(), loc='lower center', ncol=8, bbox_to_anchor=(0.5, -0.15), borderaxespad=0., frameon=False)\n\n    fig.savefig(product['img'])\n\nif __name__ == \"__main__\":\n    upstream = {\n        'filter_data': {\n            'data': 'data/filtered_data.csv'\n        }\n    }\n    product = {\n        'img': 'data/line_chart.png'\n    }\n    run(upstream, product)\n", "params": {}}