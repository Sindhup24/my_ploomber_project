{"timestamp": 1722521361.989027, "stored_source_code": "# add default values for parameters here\nimport pandas as pd\nimport folium\nfrom folium.plugins import TimestampedGeoJson\n\ndef run(upstream, product):\n    df = pd.read_csv(upstream['filter_data']['data'])\n    df['date'] = pd.to_datetime(df['date'])\n\n    # Create a map centered around the mean coordinates with a specific zoom level\n    m = folium.Map(location=[df['YCoordinate'].mean(), df['XCoordinate'].mean()], zoom_start=4)\n\n    # Define a function to determine color based on value\n    def get_color(value):\n        if value < 10:\n            return 'green'\n        elif 10 <= value < 20:\n            return 'blue'\n        elif 20 <= value < 30:\n            return 'orange'\n        else:\n            return 'red'\n\n    # Define a function to determine radius based on value\n    def get_radius(value):\n        if value < 10:\n            return 8\n        else:\n            return 10\n\n    features = []\n    for i, row in df.iterrows():\n        feature = {\n            'type': 'Feature',\n            'geometry': {\n                'type': 'Point',\n                'coordinates': [row['XCoordinate'], row['YCoordinate']]\n            },\n            'properties': {\n                'time': row['date'].isoformat(),\n                'popup': f\"ID: {row['Id']} - {row['Name']}: ({row['XCoordinate']}, {row['YCoordinate']}) Value: {row['value']}\",\n                'icon': 'circle',\n                'iconstyle': {\n                    'color': get_color(row['value']),\n                    'fillColor': get_color(row['value']),\n                    'fillOpacity': 0.6,\n                    'radius': get_radius(row['value'])\n                }\n            }\n        }\n        if 'highlight_id' in row and row['Id'] == row['highlight_id']:\n            # Adding blinking effect for the highlighted ID\n            feature['properties']['iconstyle']['className'] = 'blinking'\n        features.append(feature)\n\n    TimestampedGeoJson({\n        'type': 'FeatureCollection',\n        'features': features\n    }, period='P1D', add_last_point=True, auto_play=False, loop=False).add_to(m)\n\n    # Add legend to the map\n    legend_html = '''\n     <div style=\"position: fixed; \n                 bottom: 50px; right: 50px; width: 150px; height: 150px; \n                 border:2px solid grey; z-index:9999; font-size:14px;\n                 background-color:white;\n                 \">\n     &nbsp;<b>Legend</b><br>\n     &nbsp;<i class=\"fa fa-circle\" style=\"color:green\"></i>&nbsp; value < 10<br>\n     &nbsp;<i class=\"fa fa-circle\" style=\"color:blue\"></i>&nbsp; 10 <= value < 20<br>\n     &nbsp;<i class=\"fa fa-circle\" style=\"color:orange\"></i>&nbsp; 20 <= value < 30<br>\n     &nbsp;<i class=\"fa fa-circle\" style=\"color:red\"></i>&nbsp; value >= 30\n     </div>\n     '''\n    m.get_root().html.add_child(folium.Element(legend_html))\n\n    # Add CSS for blinking effect\n    blinking_css = '''\n    <style>\n    .blinking {\n        animation: blinker 1s linear infinite;\n    }\n    @keyframes blinker {\n        50% { opacity: 0; }\n    }\n    </style>\n    '''\n    m.get_root().html.add_child(folium.Element(blinking_css))\n\n    m.save(product['html'])\n\nif __name__ == \"__main__\":\n    upstream = {\n        'filter_data': {\n            'data': 'data/filtered_data.csv'\n        }\n    }\n    product = {\n        'html': 'data/map.html'\n    }\n    run(upstream, product)\n", "params": {}}